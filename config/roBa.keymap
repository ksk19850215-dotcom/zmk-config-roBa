#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "symbols.h"

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 5 Q       &kp W         &kp E         &kp R      &kp T                                               &kp Y       &kp U  &kp I      &kp O     &kp P
&kp A         &kp S         &kp D         &kp F      &kp G             &trans           &trans           &kp H       &kp J  &kp K      &kp L     &kp MINUS
&mt LSHIFT Z  &kp X         &kp C         &kp V      &kp B             &trans           &trans           &kp N       &kp M  &kp COMMA  &mkp MB2  &mt LSHIFT SLASH
&kp LCTRL     &kp LEFT_WIN  &kp LEFT_ALT  &lt 3 TAB  &lt 2 APOSTROPHE  &lt 1 SPACE      &mt LCTRL ENTER  &lt 2 BSPC                              &mkp MB3
            >;
        };

        FUNCTION {
            bindings = <
&kp LS(N1)    &kp LS(N2)         &kp LS(N3)     &kp LS(N4)     &kp LS(N5)                                    &kp LS(N6)     &kp LS(N8)     &kp LS(N9)     &kp LS(N7)          &kp LS(APOSTROPHE)
&kp LBKT      &kp LG(LS(S))      &trans         &kp EQUAL      &kp LS(GRAVE)      &trans      &trans         &kp BACKSLASH  &kp LS(MINUS)  &kp LC(SEMI)   &kp LS(SQT)         &kp SEMICOLON
&kp RS(RBKT)  &kp RIGHT_BRACKET  &kp BACKSLASH  &kp LA(LC(V))  &kp LC(SEMICOLON)  &trans      &trans         &kp LS(COMMA)  &kp LS(DOT)    &kp LS(SLASH)  &kp LS(APOSTROPHE)  &kp SEMI
&trans        &trans             &trans         &trans         &trans             &trans      &kp LC(ENTER)  &kp DEL                                                          &trans
            >;
        };

        NUM {
            bindings = <
&kp ESC      &kp N7  &kp N8  &kp N9  &kp MINUS                           &kp LC(HOME)  &kp HOME     &kp UP        &kp END       &kp LC(END)  
&trans       &kp N4  &kp N5  &kp N5  &kp LS(MINUS)  &trans            &trans   &kp PGUP      &kp LEFT     &kp DOWN      &kp RIGHT     &kp PGDN      
&kp LS(CAPS) &kp N1  &kp N2  &kp N3  &kp N0         &trans            &trans   &kp TAB       &kp LEFT_WIN &kp LC(PGUP)  &kp LC(PGDN)  &kp TAB
&trans       &kp LS(COMMA) &kp LS(DOT)   &trans  &trans  &kp LA(F7)            &kp LC(ENTER) &kp LSHIFT                               &trans
            >;
        };

        MOUSE {
            bindings = <
&kp C_MUTE         &kp F7  &kp F8  &kp F9  &kp F10                          &trans           &trans        &trans         &trans       &trans
&kp C_VOLUME_UP    &kp F4  &kp F5  &kp F6  &kp F11  &trans      &trans      &trans           &trans        &trans         &trans       &trans
&kp C_VOLUME_DOWN  &kp F1  &kp F2  &kp F3  &kp F12  &trans      &trans      &kp LC(F4)       &kp LA(LEFT)  &kp LA(LEFT)  &kp LA(RIGHT) &trans
&trans             &trans  &trans  &kp INS &trans   &trans                  &kp LG(R)        &kp LG(D)     &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        BT {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
