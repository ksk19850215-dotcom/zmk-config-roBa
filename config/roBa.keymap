#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include "symbols.h"

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

default_layer {
    bindings = <
        // ===== 左手：上段 → 中段 → 下段 =====
        &lt 6 Q      &kp W           &kp E           &kp R            &kp T                  &kp Y        &kp U           &kp I           &kp O            &kp P
        &kp A        &kp S           &kp D           &kp F            &kp G    &trans        &kp H        &kp J           &kp K           &kp L            &mkp MB1     // Mouse Btn1
        &mt LSHIFT Z &kp X           &kp C           &kp V            &kp B    &trans        &kp N        &kp M           &kp COMMA       &mkp MB2         &mt LSHIFT SLASH  // Mouse Btn2 / 右下は「/」をShiftモッドタップ
        // 親指（左）：Tab(タップ) / HoldでLayer3、クォート(タップ)/HoldでLayer2、Space(タップ)/HoldでLayer1
        &kp LCTRL    &kp Lwin        &kp ALT         &lt 3 TAB     &lt 2 APOSTROPHE &lt 1 SPACE          &mt LCTRL ENTER   &lt 2 BSPC     &lt 3 (&mkp MB3)

        // 親指（右）：Ctrl+Enter(モッドタップ) / Backspace(タップ) + HoldでLayer2 / Mouse Btn3（必要ならHoldでLayer3）

        // もし「Mouse Btn3 をタップ、Holdで Layer3」にしたいなら ↑を
        //   &lt 3 (&mkp MB3)
        // に置き換え。※環境によっては &lt の引数に &mkp を取れない場合あり。そのときは
        //   &mkp MB3
        // だけにして、どこか別キーで Layer3 を出すのが安定だよ。
    >;
};


FUNCTION {
    bindings = <
        &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    &kp LS(N4)    &kp LS(N5)
        &kp LS(W)     &kp LBKT      &kp EQUAL     &kp LS(EQUAL) &kp BACKSLASH
        &kp LS(BACKSLASH) &kp RBKT  &kp LC(LA(V)) &kp LC(SEMI)  &trans
        &trans        &trans        &trans

        &trans        &trans        &trans

        &kp LS(N6)    &kp LS(N8)    &kp LS(N9)    &kp LS(N7)    &kp LS(APOSTROPHE)
        &kp BACKSLASH    &kp LS(BACKSLASH)  &kp LS(SEMI)  &kp LS(APOSTROPHE)  &kp SEMI
        &kp COMMA     &kp DOT       &kp LS(COMMA) &kp LS(DOT)   &kp SLASH
        &kp LS(SLASH) &trans        &trans

        &kp LC(ENTER) &kp DEL       &trans
    >;
};


NUM {
    bindings = <
        // ===== 左手 =====
        &kp ESC        &kp LS(N7)      &kp LS(N8)        &kp LS(N9)        &kp MINUS
        &trans         &kp LS(N4)      &kp LS(N5)        &kp LS(MINUS)     &trans
        &kp LS(N1)     &kp LS(N2)      &kp LS(N3)        &kp LS(N0)        &kp N0

        // 親指（左）― 画像では「無変換」等。必要なら &kp MUHEN を使う（JIS有効時）
        &trans         &trans          &trans

        // ===== 右手 =====
        &kp LC(HOME)   &kp HOME        &kp UP            &kp END           &kp LC(END)
        &kp PGUP       &kp LEFT        &kp DOWN          &kp RIGHT         &kp PGDN
        &kp TAB        &kp LGUI        &kp LC(PGUP)      &kp LC(PGDN)      &kp TAB

        // 親指（右）― Alt+Enter / Shift
        &mt LALT ENTER &kp LSHIFT      &trans
    >;
};


MOUSE {
    bindings = <
        // ===== 左手 =====
        &kp C_MUTE         &kp F7           &kp F8            &kp F9            &kp F10
        &kp C_VOLUME_UP    &kp F4           &kp F5            &kp F6            &kp F11
        &kp C_VOLUME_DOWN  &kp F1           &kp F2            &kp F3            &kp F12

        // 親指（左）
        &trans             &kp INSERT       &trans

        // ===== 右手 =====
        &kp LS(RBKT)       &kp BACKSLASH    &trans             &trans            &trans      // }  \  Macro1/2は後で差し替え
        &trans             &trans           &kp UP             &kp F5            &trans       // Macro3/4, Alt+PrtScrnは後で
        &trans             &kp LC(F4)       &kp LA(LEFT)       &kp LA(RIGHT)     &trans

        // 親指（右）
        &kp LG(R)          &kp LG(D)        &trans             // Win/Cmd+R, Win/Cmd+D, RGB Toggle
    >;
};


        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
